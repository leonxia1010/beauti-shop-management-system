name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: beauty-shop-management-system

jobs:
  # Linting and Code Quality
  lint-and-format:
    runs-on: ubuntu-latest
    name: Lint and Format Check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Type check
        run: npx nx run-many --target=typecheck --all --parallel

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    name: Test Suite
    strategy:
      matrix:
        project: [domain, ui, data-access, auth, infra, admin-web, api-gateway, batch-jobs]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests for ${{ matrix.project }}
        run: npx nx test ${{ matrix.project }} --coverage --watchAll=false

      - name: Upload coverage to Codecov
        if: matrix.project == 'api-gateway'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/apps/api-gateway/lcov.info
          flags: backend

  # Build Applications
  build:
    runs-on: ubuntu-latest
    name: Build Applications
    needs: [lint-and-format, test]
    strategy:
      matrix:
        app: [admin-web, api-gateway, batch-jobs, mobile-app]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build ${{ matrix.app }}
        run: npx nx build ${{ matrix.app }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.app }}
          path: dist/apps/${{ matrix.app }}
          retention-days: 7

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Docker Image Build and Push
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build and Push
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [api-gateway, batch-jobs, admin-web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # End-to-End Tests
  e2e:
    runs-on: ubuntu-latest
    name: E2E Tests
    needs: [build]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: beauty_shop_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start API Gateway
        run: npx nx serve api-gateway &
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/beauty_shop_test
          REDIS_URL: redis://localhost:6379

      - name: Wait for API to be ready
        run: npx wait-on http://localhost:3000/health --timeout 60000

      - name: Run E2E tests
        run: npx nx e2e admin-web-e2e
        env:
          BASE_URL: http://localhost:4200
          API_URL: http://localhost:3000

  # Deployment (Production)
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [docker-build, e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to AWS Elastic Beanstalk
        run: |
          # Placeholder for deployment script
          echo "Deploying to AWS Elastic Beanstalk..."
          echo "IMAGE_TAG=${GITHUB_SHA}" > .env.deploy
          # Add actual deployment commands here
          # eb deploy beauty-shop-production --staged

      - name: Run post-deployment tests
        run: |
          # Placeholder for post-deployment health checks
          echo "Running post-deployment health checks..."
          # curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1

  # Notify on Success/Failure
  notify:
    runs-on: ubuntu-latest
    name: Notify Build Status
    needs: [deploy-production]
    if: always()
    steps:
      - name: Notify Slack
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: '#deployments'
          SLACK_USERNAME: 'GitHub Actions'
          SLACK_MESSAGE: 'Deployment failed for Beauty Shop Management System'